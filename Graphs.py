from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
import pickle
import glob
import csv
import os

def distance(x1, x2, y1, y2):
	return np.sqrt((x2 - x1)**2 + (y2 - y1)**2)



fig8 = plt.figure(8)
ax8 = fig8.add_subplot(111, projection='3d')

sample = 1
car1_x_test = []
car1_y_test = []
car2_x_test = []
car2_y_test = []

car1_x_predict= []
car1_y_predict = []
car2_x_predict = []
car2_y_predict = []

dist_array = []
angle_array = []
light_array = []

gen_x_array = []
gen_y_array = []
gen_light_array =[]
gen_dist_array = []
gen_angle_array = []

gen_x_array2 = []
gen_y_array2 = []
gen_light_array2 =[]
gen_dist_array2 = []
gen_angle_array2 = []

denorm_gen = []

counter = 5

start_array = ['light','dist','angle', 'light2', 'dist2', 'angle']
start_x = 0
start_y = 0

normed_arr = []
denorm_arr = []

ground_truth_csv = []
ground_truth_x1 = []
ground_truth_y1 = []
ground_truth_x2 = []
ground_truth_y2 = []
ground_truth_l = []
ground_truth_s = []
ground_truth_d = []
ground_truth_2l = []
ground_truth_2s = []
ground_truth_2d = []

gen_speed1 = []
gen_speed2 = []
gen_dir1 = []
gen_dir2 = []

gen_x_ten = []
gen_y_ten = []
gen_x_ten2 = []
gen_y_ten2 = []


def denormalizer(val, mi, ma):
	denorm = val*(ma-mi)+mi
	return denorm


#nextXY = nextPoint(start_x, start_y, start_dist, start_angle)
#nextXY2 = nextPoint(start_x2, start_y2, start_dist2, start_angle2)

#Opens and loads a pickle file

for filename in glob.glob('simulator_data_d1.csv'):

	with open(filename) as csvfile:
		reader = csv.reader(csvfile, delimiter=',')
		#print(filename)
		for row in reader:
			temp = []
			x1 = denormalizer(float(row[1]), -56.5545701913, -15.904584042)
			y1 = denormalizer(float(row[2]), -38.8697274136, 5.78484721801)
			l1 = denormalizer(float(row[3]), 1, 3)
			s1 = denormalizer(float(row[4]), 0.0, 12.8737431131)
			d1 = denormalizer(float(row[5]), -3.13358524866, 3.14159265359)
			x2 = denormalizer(float(row[7]), -95.3585481006, 24.968774703)
			y2 = denormalizer(float(row[8]), -78.4804293362, 28.7612966226)
			l2 = denormalizer(float(row[9]), 1, 3)
			s2 = denormalizer(float(row[10]), 0.0, 19.2470832483)
			d2 = denormalizer(float(row[11]), -3.13377098469, 3.14159265359)

			temp.append(float(x1))
			temp.append(float(y1))
			temp.append(float(l1))
			temp.append(float(s1))
			temp.append(float(d1))
			temp.append(float(x2))
			temp.append(float(y2))
			temp.append(float(l2))
			temp.append(float(s2))
			temp.append(float(d2))
			normed_arr.append(temp)
			temp = []

for filename in glob.glob('ground_truth.csv'):

	with open(filename) as csvfile:
		reader = csv.reader(csvfile, delimiter=',')
		#print(filename)
		for row in reader:
			temp = []
			c1 = row[0]
			x1 = row[1]
			y1 = row[2]
			l1 = row[3]
			s1 = row[4]
			d1 = row[5]
			c2 = row[6]
			x2 = row[7]
			y2 = row[8]
			l2 = row[9]
			s2 = row[10]
			d2 = row[11]
			temp.append(float(c1))
			temp.append(float(x1))
			ground_truth_x1.append(float(x1))
			temp.append(float(y1))
			ground_truth_y1.append(float(y1))
			temp.append(float(l1))
			ground_truth_l.append(float(l1))
			temp.append(float(s1))
			ground_truth_s.append(float(s1))
			temp.append(float(d1))
			ground_truth_d.append(float(d1))
			temp.append(float(c2))
			temp.append(float(x2))
			ground_truth_x2.append(float(x2))
			temp.append(float(y2))
			ground_truth_y2.append(float(y2))
			temp.append(float(l2))
			ground_truth_2l.append(float(l2))
			temp.append(float(s2))
			ground_truth_2s.append(float(s2))
			temp.append(float(d2))
			ground_truth_2d.append(float(d2))
			ground_truth_csv.append(temp)
			temp = []


with open ('seed_gt.pkl', 'rb') as f:
	test = pickle.load(f)

	#test = test[0:1000]

with open ('5layer_Dir_1.6mse.pkl', 'rb') as f:
	predict = pickle.load(f)

with open ('generated_para_lsd_0.2mse.pkl', 'rb') as f:
	gen = pickle.load(f)

#np.savetxt("CSVdata\Data_denormed_of_final.csv", normed_arr, delimiter=",")
#with open ('lsp.pkl', 'rb') as f:
	#lsp = pickle.load(f)

	#lsp.insert(0,start_array1)
gen_50 = gen.tolist()
test_normed_csv = np.asarray(test)
#np.savetxt("CSVdata\Data_denormed_test.csv", test_normed_csv, delimiter=",")

# Add generated data to gen_li. Replace first data in the first index with the data from the last index of seed
gen_li = [[4.87197459e-01,   1.52969226e-01, 5.00000000e-01,   3.84690702e-01,   7.49680996e-01, 4.87075984e-01,   2.96342045e-01, 5.00000000e-01,   2.98079759e-01,   7.49688387e-01], [0.5506155490875244, 0.37433987855911255, 0.2658378779888153, 0.026464208960533142, 0.5118105411529541, 0.5026237368583679, 0.5311395525932312, 0.4146898686885834, 0.12267495691776276, 0.5797896981239319], [0.5507951974868774, 0.37368521094322205, 0.2611912190914154, 0.02521492913365364, 0.5076779127120972, 0.5030982494354248, 0.5304844379425049, 0.4192500114440918, 0.12517336010932922, 0.5837680101394653], [0.5501049757003784, 0.3726040720939636, 0.2435920536518097, 0.02009524777531624, 0.49265629053115845, 0.5044069290161133, 0.5286340713500977, 0.4352993369102478, 0.13517598807811737, 0.5988790392875671], [0.5493729114532471, 0.3719470500946045, 0.21465086936950684, 0.013026452623307705, 0.4715474247932434, 0.5051822662353516, 0.5261017084121704, 0.46662381291389465, 0.15068849921226501, 0.6219561100006104], [0.5493391752243042, 0.3717273473739624, 0.21277402341365814, 0.012710214592516422, 0.46988701820373535, 0.505345344543457, 0.5258269906044006, 0.4686461091041565, 0.15200556814670563, 0.6236993074417114], [0.549202561378479, 0.3714459538459778, 0.2096339613199234, 0.012177585624158382, 0.46718528866767883, 0.5055748820304871, 0.5254192352294922, 0.47216129302978516, 0.1542574018239975, 0.6265788078308105], [0.549035906791687, 0.3712737560272217, 0.2069079875946045, 0.011742168106138706, 0.46489986777305603, 0.5057389736175537, 0.5250645875930786, 0.4753706157207489, 0.15627706050872803, 0.6291037797927856], [0.5490252375602722, 0.37123405933380127, 0.20653289556503296, 0.011687057092785835, 0.46457475423812866, 0.505770206451416, 0.5250136852264404, 0.4757927656173706, 0.15654927492141724, 0.6294477581977844], [0.5490057468414307, 0.3711966872215271, 0.20610329508781433, 0.011622629128396511, 0.4642080068588257, 0.505801796913147, 0.5249582529067993, 0.47628775238990784, 0.15686538815498352, 0.6298414468765259], [0.5489905476570129, 0.3711775839328766, 0.20582737028598785, 0.011581209488213062, 0.4639756679534912, 0.5058197975158691, 0.5249232649803162, 0.47661328315734863, 0.1570701152086258, 0.6300951242446899], [0.548988401889801, 0.3711717426776886, 0.20576761662960052, 0.011572507210075855, 0.46392425894737244, 0.5058244466781616, 0.524915337562561, 0.4766814708709717, 0.15711387991905212, 0.6301499009132385], [0.5489858984947205, 0.37116730213165283, 0.2057139277458191, 0.011564569547772408, 0.4638786315917969, 0.5058283805847168, 0.5249084234237671, 0.4767437279224396, 0.15715354681015015, 0.6301990747451782], [0.5489844083786011, 0.3711651861667633, 0.20568495988845825, 0.011560299433767796, 0.4638541042804718, 0.5058304071426392, 0.524904727935791, 0.47677773237228394, 0.15717503428459167, 0.630225658416748], [0.5489839911460876, 0.37116438150405884, 0.20567645132541656, 0.011559056118130684, 0.46384695172309875, 0.5058309435844421, 0.5249036550521851, 0.4767875671386719, 0.1571812778711319, 0.6302335262298584], [0.5489836931228638, 0.37116387486457825, 0.20567001402378082, 0.01155812107026577, 0.46384140849113464, 0.5058314204216003, 0.5249028205871582, 0.4767950177192688, 0.15718604624271393, 0.6302394866943359], [0.5489835739135742, 0.37116360664367676, 0.20566684007644653, 0.011557647958397865, 0.46383872628211975, 0.5058317184448242, 0.5249024629592896, 0.4767987132072449, 0.15718838572502136, 0.6302422285079956], [0.5489835143089294, 0.3711635172367096, 0.2056656926870346, 0.011557474732398987, 0.46383777260780334, 0.5058316588401794, 0.5249022245407104, 0.4768000543117523, 0.1571892499923706, 0.6302433013916016], [0.5489835143089294, 0.37116342782974243, 0.2056649625301361, 0.011557373218238354, 0.4638371467590332, 0.505831778049469, 0.5249021649360657, 0.47680091857910156, 0.15718981623649597, 0.6302440166473389], [0.5489834547042847, 0.37116342782974243, 0.20566457509994507, 0.011557310819625854, 0.46383681893348694, 0.5058317184448242, 0.5249021053314209, 0.476801335811615, 0.1571899950504303, 0.6302443742752075], [0.5489834547042847, 0.37116336822509766, 0.20566445589065552, 0.011557266116142273, 0.4638367295265198, 0.5058318376541138, 0.5249021053314209, 0.4768015742301941, 0.15719012916088104, 0.6302444934844971], [0.5489834547042847, 0.37116342782974243, 0.2056644707918167, 0.011557256802916527, 0.4638366401195526, 0.505831778049469, 0.5249020457267761, 0.47680169343948364, 0.1571902632713318, 0.6302445530891418], [0.5489834547042847, 0.37116342782974243, 0.20566433668136597, 0.011557264253497124, 0.46383655071258545, 0.5058317184448242, 0.5249021053314209, 0.47680169343948364, 0.1571902483701706, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.011557244695723057, 0.46383652091026306, 0.5058318376541138, 0.5249020457267761, 0.47680172324180603, 0.15719027817249298, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.20566426217556, 0.011557255871593952, 0.46383652091026306, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719027817249298, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.011557244695723057, 0.46383655071258545, 0.5058318972587585, 0.5249020457267761, 0.4768017530441284, 0.15719027817249298, 0.6302446126937866], [0.5489834547042847, 0.37116336822509766, 0.2056642472743988, 0.011557229794561863, 0.4638364911079407, 0.5058318972587585, 0.5249020457267761, 0.4768017530441284, 0.15719030797481537, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.20566426217556, 0.011557213962078094, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.20566426217556, 0.011557213962078094, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.011557213962078094, 0.4638364911079407, 0.5058318376541138, 0.5249021053314209, 0.4768017530441284, 0.15719032287597656, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642770767212, 0.01155722513794899, 0.46383652091026306, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.01155722513794899, 0.46383652091026306, 0.5058318376541138, 0.5249021053314209, 0.4768017530441284, 0.15719032287597656, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.20566426217556, 0.011557213962078094, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719032287597656, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.20566426217556, 0.011557206511497498, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446722984314], [0.5489834547042847, 0.37116336822509766, 0.20566426217556, 0.011557229794561863, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719027817249298, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.01155722513794899, 0.46383652091026306, 0.5058318376541138, 0.5249021053314209, 0.4768017530441284, 0.15719032287597656, 0.6302446126937866], [0.5489834547042847, 0.37116336822509766, 0.2056642770767212, 0.011557217687368393, 0.46383652091026306, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.20566426217556, 0.011557206511497498, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446722984314], [0.5489834547042847, 0.37116336822509766, 0.2056642472743988, 0.011557228863239288, 0.46383652091026306, 0.5058318376541138, 0.5249021053314209, 0.4768017530441284, 0.15719032287597656, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.011557240970432758, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719030797481537, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642770767212, 0.011557217687368393, 0.46383652091026306, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719032287597656, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.011557221412658691, 0.46383652091026306, 0.5058318376541138, 0.5249021053314209, 0.4768017530441284, 0.15719032287597656, 0.6302446126937866], [0.5489834547042847, 0.37116336822509766, 0.2056642472743988, 0.011557229794561863, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.011557222343981266, 0.4638364911079407, 0.5058318972587585, 0.5249020457267761, 0.4768017530441284, 0.15719027817249298, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.2056642472743988, 0.011557214893400669, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719030797481537, 0.6302446722984314], [0.5489834547042847, 0.37116336822509766, 0.2056642472743988, 0.011557221412658691, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866], [0.5489834547042847, 0.37116336822509766, 0.20566426217556, 0.011557213962078094, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866], [0.5489834547042847, 0.37116342782974243, 0.20566426217556, 0.011557213962078094, 0.4638364911079407, 0.5058318376541138, 0.5249020457267761, 0.4768017530441284, 0.15719029307365417, 0.6302446126937866]]

#print("length gen_li" + str(len(gen_li)))
#Add seed data here
seed = [[  4.81000000e+02,   4.87197459e-01,   1.34475812e-01,
          5.00000000e-01,   3.71755362e-01,   7.49680996e-01,
          5.29000000e+02,   4.87075984e-01,   2.87428647e-01,
          5.00000000e-01,   3.01070452e-01,   7.49688387e-01],
       [  4.81000000e+02,   4.87197459e-01,   1.45528167e-01,
          5.00000000e-01,   3.79517436e-01,   7.49680996e-01,
          5.29000000e+02,   4.87075984e-01,   2.92783946e-01,
          5.00000000e-01,   2.99298465e-01,   7.49688387e-01],
       [  4.81000000e+02,   4.87197459e-01,   1.52969226e-01,
          5.00000000e-01,   3.84690702e-01,   7.49680996e-01,
          5.29000000e+02,   4.87075984e-01,   2.96342045e-01,
          5.00000000e-01,   2.98079759e-01,   7.49688387e-01]]

for i in range(len(gen_li)):
	temp = []
	for j in range(len(gen_li[i])):
		if (j == 0):
			val = denormalizer(float(gen_li[i][j]), -56.5545701913, -15.904584042)
			#print("car 1 x " + str(val) + ' ' + str(gen_li[i][j]))
			temp.append(val)
		if (j == 1):
			val = denormalizer(float(gen_li[i][j]), -38.8697274136, 5.78484721801)
			temp.append(val)
			#print("car 1 y " + str(val) + ' ' + str(gen_li[i][j]))
		if (j == 2):
			val = denormalizer(float(gen_li[i][j]), 1, 3)
			temp.append(val)
		if (j == 3):
			val = denormalizer(float(gen_li[i][j]), 0.0, 12.8737431131)
			temp.append(val)
		if (j == 4):
			val = denormalizer(float(gen_li[i][j]), -3.13358524866, 3.14159265359)
			gen_dir1.append(float(val))
			temp.append(val)
		if (j == 5):
			val = denormalizer(float(gen_li[i][j]), -95.3585481006, 24.968774703)
			temp.append(val)
		if (j == 6):
			val = denormalizer(float(gen_li[i][j]), -78.4804293362, 28.7612966226)
			temp.append(val)
		if (j == 7):
			val = denormalizer(float(gen_li[i][j]), 1, 3)
			temp.append(val)
		if (j == 8):
			val = denormalizer(float(gen_li[i][j]), 0.0, 19.2470832483)
			temp.append(val)
		if (j == 9):
			val = denormalizer(float(gen_li[i][j]), -3.13377098469, 3.14159265359)
			gen_dir2.append(float(val))
			temp.append(val)


	denorm_gen.append(temp)
time_constant = 0.028609
#time_constant = 1
def nextPoint_car1(x, y, a, i):
	if (len(a) == 0):
		print('done calc car 1 xy')
	else:
		x2 = x+((a[i][3]*time_constant)*np.cos(a[i][4]))
		y2 = y+((a[i][3]*time_constant)*np.sin(a[i][4]))
		gen_x_array.append(x2)
		gen_x_ten.append(a[i][0])
		gen_y_array.append(y2)
		gen_y_ten.append(a[i][1])
		gen_x_ten.append
		gen_light_array.append(a[i][2])
		gen_dist_array.append(a[i][3]*time_constant)
		gen_angle_array.append(a[i][4])
		gen_speed1.append(a[i][3])
		i += 1
		nextPoint_car1(x2,y2, a[i:], 0)

def nextPoint_car2(x, y, a, i):
	if (len(a) == 0):
		print('done calc car 2 xy')
	else:
		x2 = x+((a[i][8]*time_constant)*np.cos(a[i][9]))
		y2 = y+((a[i][8]*time_constant)*np.sin(a[i][9]))
		gen_x_array2.append(x2)
		gen_x_ten2.append(a[i][5])
		gen_y_array2.append(y2)
		gen_y_ten2.append(a[i][6])
		gen_light_array2.append(a[i][7])
		gen_dist_array2.append(a[i][8]*time_constant)
		gen_angle_array2.append(a[i][9])
		gen_speed2.append(a[i][8])
		i += 1
		nextPoint_car2(x2,y2, a[i:], 0)

#6.53383851e-01   5.43324590e-01 
#5.58101833e-01   5.52258968e-01 
x_norm1 = denormalizer(seed[0][1], -56.5545701913, -15.904584042)
#print(seed[0][1])
#print(seed[0][2])
y_norm1 = denormalizer(seed[0][2], -38.8697274136, 5.78484721801)
x2_norm1 = denormalizer(seed[0][7], -95.3585481006, 24.968774703)
y2_norm1 = denormalizer(seed[0][8] , -78.4804293362, 28.7612966226)

x_norm2 = denormalizer(seed[1][1] , -56.5545701913, -15.904584042)
y_norm2 = denormalizer(seed[1][2], -38.8697274136, 5.78484721801)
x2_norm2 = denormalizer(seed[1][7], -95.3585481006, 24.968774703)
y2_norm2 = denormalizer(seed[1][8], -78.4804293362, 28.7612966226)

x_norm3 = denormalizer(seed[2][1], -56.5545701913, -15.904584042)
y_norm3 = denormalizer(seed[2][2], -38.8697274136, 5.78484721801)
x2_norm3 = denormalizer(seed[2][7], -95.3585481006, 24.968774703)
y2_norm3 = denormalizer(seed[2][8], -78.4804293362, 28.7612966226)

#print('seed: ')
#print('Car 1 pos 1: ' + str(x_norm1) + ' ' + str(y_norm1))
#print('Car 1 pos 2: ' + str(x_norm2) + ' ' + str(y_norm2))
#print('Car 1 pos 3: ' + str(x_norm3) + ' ' + str(y_norm3))

#print('Car 2 pos 1: ' + str(x2_norm1) + ' ' + str(y2_norm1))
#print('Car 2 pos 2: ' + str(x2_norm2) + ' ' + str(y2_norm2))
#print('Car 2 pos 3: ' + str(x2_norm3) + ' ' + str(y2_norm3))

gen_x_array.append(x_norm1)
gen_y_array.append(y_norm1)

gen_x_array2.append(x2_norm1)
gen_y_array2.append(y2_norm1)

gen_x_array.append(x_norm2)
gen_y_array.append(y_norm2)

gen_x_array2.append(x2_norm2)
gen_y_array2.append(y2_norm2)


#car1 : -29.994525695887116 -14.607798972343684
#car2 : -28.203648699971538 -19.255224393768863

#Car1 : -28.128791098845713 -17.513186992141364
	#	-33.25				-26.23277145829449


#Car2 : -28.203648699971538 -19.255224393768863
		#-31.008792218894047 -23.578177608507804

# Car 1 final : -33.328242112821684		-26.565997718478961
# Car 1 real  : -33.25 					-26.23277145829449
# Car 2 final : -25.028389364590794 	-22.75
# Car 2 real  : -25.028389364590794 	-23.578177608507804

# Car 1 first real : -33.25				-26.23277145829449
# Car 1 first gen  : -33.257220487765089 -26.244767584963974

# Car 2 first real : -25.048650499504262	-22.75
# Car 2 first gen  : -25.028389364590794 	-22.75


nextPoint_car1(x_norm3, y_norm3, denorm_gen, 0)
nextPoint_car2(x2_norm3, y2_norm3, denorm_gen, 0)
#print('X pos ' + str(gen_x_array))
#print('Y pos' + str(gen_y_array))

#print('Making test graph')


for i in range(len(gen_x_array)):
	car1gen_flat = ax8.scatter(gen_x_array[i], gen_y_array[i], zs = i, zdir = 'z', c='g', alpha = 0.2)
	car2gen_flat = ax8.scatter(gen_x_array2[i], gen_y_array2[i], zs = i, zdir = 'z', c='r', alpha = 0.2)

for i in range(len(ground_truth_x1)):
	car1gd = ax8.scatter(ground_truth_x1[i], ground_truth_y1[i], zs = i, zdir = 'z', c='b', alpha = 0.2)
	car2gd = ax8.scatter(ground_truth_x2[i], ground_truth_y2[i], zs = i, zdir = 'z', c='y', alpha = 0.2)

for i in range(len(gen_x_ten)):
	car1gdten = ax8.scatter(gen_x_ten[i], gen_y_ten[i], zs = i, zdir = 'z', c='k', alpha = 0.2)
	car2gdten = ax8.scatter(gen_x_ten2[i], gen_y_ten2[i], zs = i, zdir = 'z', c='m', alpha = 0.2)

ax8.set_xlabel('X-coordinate')
ax8.set_ylabel('Y-coordinate')
ax8.title.set_text('Generated data')
ax8.legend((car1gen_flat, car2gen_flat, car1gd, car2gd, car1gdten, car2gdten), ('Car 1 gen', 'Car 2 gen', 'Car 1 ground truth', 'Car 2 gound truth', 
	'Car 1 Coord', 'Car 2 Coord'), scatterpoints = 1, loc='upper right', ncol=6, fontsize=10)

#print('finished plotting')

print("gen x 1 " + str(gen_x_array))
print("gen y 1 " + str(gen_y_array))
print("gen s 1 " + str(gen_speed1))
print("gen l 1 " + str(gen_dir1))
print("gen x 2 " + str(gen_x_array2))
print("gen y 2 " + str(gen_y_array2))
print("gen s 2 " + str(gen_speed2))
print("gen l 2 " + str(gen_dir2))
print("ground x 1 " + str(ground_truth_x1))
print("ground y 1 " + str(ground_truth_y1))
print("ground s 1 " + str(ground_truth_l))
print("ground d 1 " + str(ground_truth_d))
print("ground x 2 " + str(ground_truth_x2))
print("ground y 2 " + str(ground_truth_y2))
print("ground s 2 " + str(ground_truth_2l))
print("ground d 2 " + str(ground_truth_2d))


plt.show()
